#!/bin/bash

mydir=$(cd `dirname $0`;pwd)
cwd=$(pwd)

cmdname=$0
export "PREFIX=123"

usage()
{
    printf "\
Usage: $cmdname [OPTION...] <directory-number> <domain> <password>\n\
\n\
Options:\n\
  --prefix PREFIX   twin-prefix (default: 123)\n\
  --ifc iFC-FILE    XML file containing the iFC\n\
  -h, --help        display this usage\n"

    printf "\n"

    exit 0
}

error()
{
    printf "$@"
    printf "\n\n"

    usage
}

params="$(getopt -o h -l help,prefix:,ifc: --name $cmdname -- "$@")"

if [ $? -ne 0 ]
then
    usage
fi

eval set -- "$params"
unset params

while true
do
    case $1 in
	--prefix)
	export "PREFIX=${2-}"
	shift 2
	;;
	--ifc)
	export "IFC=${2-}"
	shift 2
	;;
	--)
	shift
	break
	;;
        -h|--help)
        usage
        ;;
        *)
        usage
        ;;
    esac
done

local_settings=$(
    find /usr/share/clearwater/homestead/env -name local_settings.py
)
if [ -z "$local_settings" ]; then
    printf "Error: can't find local_settings.py!\n"
    exit 1
fi
    
eval $(python -c "\
execfile(\"$local_settings\"); \
print \"\
LOCAL_IP=%s\n\
HTTP_PORT=%s\n\
LOCAL_PROVISIONING_ENABLED=%s\n\
HSS_ENABLED=%s\n\" % \
(LOCAL_IP, HTTP_PORT, LOCAL_PROVISIONING_ENABLED, HSS_ENABLED)")

if [ -z $LOCAL_IP ]; then
    printf "Error: no LOCAL_IP in local_settings!\n"
    exit 1
fi

if [ -z $HTTP_PORT ]; then
    printf "Error: no HTTP_PORT in local_settings!\n"
    exit 1
fi

if [ "$LOCAL_PROVISIONING_ENABLED" != "True" ]; then
    printf "Error: local provisioning is not enabled!\n"
    exit 1
fi

if [ "$HSS_ENABLED" != "False" ]; then
    printf "Error: HSS is not disabled!\n"
    exit 1
fi

USER=$1
if [ -z $USER ]; then
    error "Error: a user (directory number) must be specified!"
fi
shift
DOMAIN=$1
if [ -z $DOMAIN ]; then
    error "Error: a domain must be specified!"
fi
shift
PASSWORD=$1
if [ -z $PASSWORD ]; then
    error "Error: a password must be specified!"
fi
shift

if [ ! -z $IFC ]; then
    if [ ! -f $IFC ]; then
	printf "Error: no such file '${IFC}'!\n"
	exit 1
    else
	cat $IFC|python -c '\
import xml.dom.minidom, sys;\
print xml.dom.minidom.parse(sys.stdin).toprettyxml()\
' 2>&1|sed -e '/^[[:space:]]*$/d'|grep -qi expaterror
	if [ $? -eq 0 ]; then
	    printf "Error: invalid XML in '${IFC}!\n"
	    exit 1
	fi
    fi
fi

HSPROV=${LOCAL_IP}:${HTTP_PORT}
public_id=sip:${USER}@${DOMAIN}
private_id=${USER}@${DOMAIN}

if [ "$(curl -s http://${HSPROV}/ping 2>&1)" != "OK" ]; then
    printf "Error: can't contact homestead-prov @ http://${HSPROV}!\n"
    exit 1
fi

impu=$(curl -s http://${HSPROV}/impu/${public_id} 2>&1)
if [[ ${impu:0:1} == "<" ]]; then
    printf "Error: IMPU user '${public_id}' already exists!\n"
    exit 1
fi
  
if [[ "$(curl -s http://${HSPROV}/impi/${private_id}/digest)" =~ digest_ha1 ]]; then
    printf "Error: IMPI user '${private_id}' already exists!\n"
    exit 1
fi

#
# Create the private ID
#
new_digest=$(
    printf "${private_id}:${DOMAIN}:${PASSWORD}"|md5sum|awk '{print $1}'
)
json_digest="{\"digest_ha1\": \"${new_digest}\", \"realm\": \"${DOMAIN}\"}"
#echo "json_digest=${json_digest}"
put_sta=$(
    printf "%s\n" "${json_digest}" |\
    curl -s -X PUT -d @- http://${HSPROV}/private/${private_id}
)
if [ ! -z "$put_sta" ]; then
    printf "Error: couldn't create IMPU user '${public_id}'!\n"
    exit 1
fi

#
# Create IRS
#
irs_uuid=$(
    curl -s -D - -X POST http://${HSPROV}/irs|\
    grep "Location:"|awk '{print $2}'|\
    sed -e 's#[[:space:]]##g'|\
    sed -e 's#/irs/##'
)
#echo "irs_uuid=$irs_uuid"

#
# Associate the private ID with the new IRS
#
#echo curl -s -X PUT http://${HSPROV}/private/${private_id}/associated_implicit_registration_sets/${irs_uuid}
rsp=$(
    curl -s -X PUT http://${HSPROV}/private/${private_id}/associated_implicit_registration_sets/${irs_uuid}
)
if [ ! -z $rsp ]; then
    printf "Error: couldn't associate '${private_id}' with IRS '${irs_uuid}!\n"
    ${mydir}/delete_user -fq ${USER} ${DOMAIN}
    exit 1
fi

#
# Create the service profile
#
#echo curl -s -X POST http://${HSPROV}/irs/${irs_uuid}/service_profiles
sp_uuid=$(
    curl -s -D - -X POST http://${HSPROV}/irs/${irs_uuid}/service_profiles|\
    grep "Location:"|\
    awk '{print $2}'|\
    sed -e 's#[[:space:]]##g'|\
    sed -e 's#/irs/.*/service_profiles/##'
)
#echo "sp_uuid=$sp_uuid"

#
# Create public ID
#
pubid_sta=$(
    printf "<PublicIdentity><Identity>%s</Identity></PublicIdentity>\n" "${public_id}"|\
    curl -s -X PUT -d @- http://${HSPROV}/irs/${irs_uuid}/service_profiles/${sp_uuid}/public_ids/${public_id}
)
if [ ! -z $pubid_sta ]; then
    printf "Error: couldn't create public ID '${public_id}'!\n"
    ${mydir}/delete_user -fq ${USER} ${DOMAIN}
    exit 1
fi

#
# Set iFC
#
service_profile=$(
    curl -s -D - http://${HSPROV}/public/${public_id}/service_profile|\
    grep "Location:"|\
    awk '{print $2}'|\
    tr '[[:space:]]' ' '|sed -e 's#[[:space:]]##g'
)
if [ -z $IFC ]; then
    cat > $$.iFC <<'EOF'
<?xml version="1.0" ?>
<ServiceProfile>
  <InitialFilterCriteria>
    <Priority>4</Priority>
    <TriggerPoint>
      <ConditionTypeCNF>1</ConditionTypeCNF>
      <SPT>
	<ConditionNegated>0</ConditionNegated>
	<Group>0</Group>
	<Method>INVITE</Method>
	<Extension/>
      </SPT>
      <SPT>
	<ConditionNegated>0</ConditionNegated>
	<Group>0</Group>
	<Method>SUBSCRIBE</Method>
	<Extension/>
      </SPT>
      <SPT>
	<ConditionNegated>0</ConditionNegated>
	<Group>1</Group>
	<SessionCase>1</SessionCase>
	<Extension/>
      </SPT>
      <SPT>
	<ConditionNegated>0</ConditionNegated>
	<Group>1</Group>
	<SessionCase>2</SessionCase>
	<Extension/>
      </SPT>
    </TriggerPoint>
    <ApplicationServer>
      <ServerName>sip:mobile-twinned@gemini.${DOMAIN};twin-prefix=${PREFIX}</ServerName>
      <DefaultHandling>0</DefaultHandling>
    </ApplicationServer>
  </InitialFilterCriteria>
</ServiceProfile>
EOF
else
    cat $IFC > $$.iFC
fi

sed -ie "s#\${DOMAIN}#${DOMAIN}#g" $$.iFC
sed -ie "s#\${PREFIX}#${PREFIX}#g" $$.iFC

ifc_sta=$(
    cat $$.iFC|\
    curl -s -X PUT -d @- http://${HSPROV}${service_profile}/filter_criteria
)
if [ ! -z $ifc_sta ]; then
    printf "Error: couldn't update iFC!\n"
    ${mydir}/delete_user -fq ${USER} ${DOMAIN}
    exit 1
fi

rm -f $$.iFC*

${mydir}/display_user ${USER} ${DOMAIN}
