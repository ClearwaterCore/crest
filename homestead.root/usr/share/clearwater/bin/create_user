#!/bin/bash

# @file create_user
#
# Project Clearwater - IMS in the Cloud
# Copyright (C) 2013  Metaswitch Networks Ltd
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version, along with the "Special Exception" for use of
# the program along with SSL, set forth below. This program is distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details. You should have received a copy of the GNU General Public
# License along with this program.  If not, see
# <http://www.gnu.org/licenses/>.
#
# The author can be reached by email at clearwater@metaswitch.com or by
# post at Metaswitch Networks Ltd, 100 Church St, Enfield EN2 6BQ, UK
#
# Special Exception
# Metaswitch Networks Ltd  grants you permission to copy, modify,
# propagate, and distribute a work formed by combining OpenSSL with The
# Software, or a work derivative of such a combination, even if such
# copying, modification, propagation, or distribution would otherwise
# violate the terms of the GPL. You must comply with the GPL in all
# respects for all of the code used other than OpenSSL.
# "OpenSSL" means OpenSSL toolkit software distributed by the OpenSSL
# Project and licensed under the OpenSSL Licenses, or a work based on such
# software and licensed under the OpenSSL Licenses.
# "OpenSSL Licenses" means the OpenSSL License and Original SSLeay License
# under which the OpenSSL Project distributes the OpenSSL toolkit software,
# as those licenses appear in the file LICENSE-OPENSSL.

mydir=$(cd `dirname $0`;pwd)
cwd=$(pwd)
quiet=0
accession=0

cmdname=$0
export "PREFIX=123"

usage()
{
    printf "\
Usage: $cmdname [OPTION...] <directory-number>[...<directory-number>] <domain> <password>\n\
\n\
Options:\n\
  --prefix PREFIX   twin-prefix (default: 123)\n\
  --ifc iFC-FILE    XML file containing the iFC\n\
  --hsprov IP:PORT  IP address and port of homestead-prov\n\
  -q, --quiet       don't display the user\n\
  -h, --help        display this usage\n"

    printf "\n"

    exit 0
}

error()
{
    printf "$@"
    printf "\n\n"

    usage
}

params="$(getopt -o hq -l help,prefix:,ifc:,quiet,hsprov:,accession --name $cmdname -- "$@")"

if [ $? -ne 0 ]
then
    usage
fi

eval set -- "$params"
unset params

while true
do
    case $1 in
	--prefix)
	export "PREFIX=${2-}"
	shift 2
	;;
	--hsprov)
	export "HSPROV=${2-}"
	shift 2
	;;
	--ifc)
	export "IFC=${2-}"
	shift 2
	;;
	--)
	shift
	break
	;;
        -q|--quiet)
        let "quiet=1"
	shift
        ;;
        --accession)
        let "accession=1"
	shift
        ;;
        -h|--help)
        usage
        ;;
        *)
        usage
        ;;
    esac
done

if [[ -z $HSPROV && -d /usr/share/clearwater/homestead/env ]]; then
    local_settings=$(find /usr/share/clearwater/homestead/env -name local_settings.py)
    if [ ! -z "$local_settings" ]; then
	eval $(python -c "execfile(\"$local_settings\"); print \"LOCAL_IP=%s\nHTTP_PORT=%s\nHSS_ENABLED=%s\n\" % (LOCAL_IP, HTTP_PORT, HSS_ENABLED)")

	if [ -z $LOCAL_IP ]; then
	    printf "Error: no LOCAL_IP in local_settings!\n"
	    exit 1
	fi

	if [ -z $HTTP_PORT ]; then
	    printf "Error: no HTTP_PORT in local_settings!\n"
	    exit 1
	fi

	if [ "$HSS_ENABLED" != "False" ]; then
	    printf "Error: HSS is not disabled!\n"
	    exit 1
	fi
    else
	printf "Error: can't find local_settings.py!\n"
	exit 1
    fi
else
    if [ -z $HSPROV ]; then
	error "Error: homestead-prov address must be specified!"
    fi
    IP=( $(echo $HSPROV|sed -e 's#:# #') )
    LOCAL_IP=${IP[0]}
    HTTP_PORT=${IP[1]}
    if [ -z $HTTP_PORT ]; then
	HTTP_PORT=8889
    fi
    if [ -z $LOCAL_IP ]; then
	error "Error: homestead-prov IP address must be specified!"
    fi
fi

USER=$1
if [ -z $USER ]; then
    error "Error: a user (directory number) must be specified!"
fi
shift
DOMAIN=$1
if [ -z $DOMAIN ]; then
    error "Error: a domain must be specified!"
fi
shift
PASSWORD=$1
if [ -z $PASSWORD ]; then
    error "Error: a password must be specified!"
fi
shift

if [ ! -z $IFC ]; then
    if [ ! -f $IFC ]; then
	printf "Error: no such file '${IFC}'!\n"
	exit 1
    else
	cat $IFC|python -c '\
import xml.dom.minidom, sys;\
print xml.dom.minidom.parse(sys.stdin).toprettyxml()\
' 2>&1|sed -e '/^[[:space:]]*$/d'|grep -qi expaterror
	if [ $? -eq 0 ]; then
	    printf "Error: invalid XML in '${IFC}!\n"
	    exit 1
	fi
    fi
fi

HSPROV=${LOCAL_IP}:${HTTP_PORT}
_USERS=(${USER//,/ })
USERS=()
SIZES=()
for _USER in ${_USERS[@]}; do
    seq_USERS=(${_USER//./ })
    if [ ${#seq_USERS[@]} -eq 1 ]; then
        seq_USERS[1]=${seq_USERS[0]}
    fi
    echo "${seq_USERS[0]}" | egrep -qe "^[+0-9][0-9]*$"
    if [ $? -ne 0 ]; then
	printf "Error: invalid user range - ${seq_USERS[0]}..${seq_USERS[1]}!\n"
	exit 1
    fi
    echo "${seq_USERS[1]}" | egrep -qe "^[+0-9][0-9]*$"
    if [ $? -ne 0 ]; then
	printf "Error: invalid user range - ${seq_USERS[0]}..${seq_USERS[1]}!\n"
	exit 1
    fi
    if [ ${seq_USERS[0]} -gt ${seq_USERS[1]} ]; then
	printf "Error: invalid user range - ${seq_USERS[0]}..${seq_USERS[1]}!\n"
	exit 1
    fi
    if [ ${#seq_USERS[0]} -ne ${#seq_USERS[1]} ]; then
	printf "Error: invalid user range - ${seq_USERS[0]}..${seq_USERS[1]}!\n"
	exit 1
    fi
    SIZES[${#USERS[@]}]=${#seq_USERS[0]}

    let "num=$(echo ${seq_USERS[0]}|sed -e 's#[+]##g'|sed -e 's#^0*##')+1"
    if [ $num -lt 0 ]; then
	printf "Error: invalid user - ${seq_USERS[0]}!\n"
	exit 1
    fi
    let "num=$(echo ${seq_USERS[1]}|sed -e 's#[+]##g'|sed -e 's#^0*##')+1"
    if [ $num -lt 0 ]; then
	printf "Error: invalid user - ${seq_USERS[1]}!\n"
	exit 1
    fi

    seq_USERS[0]=$(echo ${seq_USERS[0]} | sed -e 's#^0*##' | sed -e 's#^[+]0*#+#')
    seq_USERS[1]=$(echo ${seq_USERS[1]} | sed -e 's#^0*##' | sed -e 's#^[+]0*#+#')

    USERS[${#USERS[@]}]="{${seq_USERS[0]}..${seq_USERS[1]}}"
done

let "i=0"
while [ $i -lt ${#USERS[@]} ]; do
    user=${USERS[$i]}
    plus=""
    rplus=""
    let "SIZE=${SIZES[$i]}"
    if [ "${user:1:1}" == "+" ]; then
	plus="%2B"
	rplus="+"
	let "SIZE=$SIZE - 1"
    fi
    for USER in $(eval echo ${USERS[$i]}); do
	rUSER=$rplus$(printf "%0*d" "$SIZE" "$USER")
	USER=$plus$(printf "%0*d" "$SIZE" "$USER")

	public_id=sip:${USER}@${DOMAIN}
	rpublic_id=sip:${rUSER}@${DOMAIN}
	private_id=${USER}@${DOMAIN}
	rprivate_id=${rUSER}@${DOMAIN}
	accession_id=${USER}
	raccession_id=${rUSER}

	if [ "$(curl -s http://${HSPROV}/ping 2>&1)" != "OK" ]; then
	    printf "Error: can't contact homestead-prov @ http://${HSPROV}!\n"
	    exit 1
	fi

	impu=$(curl -s http://${HSPROV}/impu/${public_id} 2>&1)
	if [[ ${impu:0:1} == "<" ]]; then
	    if [[ "$impu" =~ \<PrivateID\>Unspecified\</PrivateID\> ]]; then
		printf "Warning: IMPU user '%s' already exists!\n" "${rpublic_id}"
	    else
		printf "Error: IMPU user '%s' already exists!\n" "${rpublic_id}"
		exit 1
	    fi
	fi
	
	#    if [[ "$(curl -s http://${HSPROV}/impi/${private_id}/digest)" =~ digest_ha1 ]]; then
	#	printf "Error: IMPI user '${rprivate_id}' already exists!\n"
	#	exit 1
	#    fi

	#
	# Create the private ID
	#
	new_digest=$(
	    printf "%s" "${rprivate_id}:${DOMAIN}:${PASSWORD}"|md5sum|awk '{print $1}'
	)
	json_digest="{\"digest_ha1\": \"${new_digest}\", \"realm\": \"${DOMAIN}\"}"
	#echo "json_digest=${json_digest}"
	#echo curl -s -X PUT -d @- http://${HSPROV}/private/${private_id}
	put_sta=$(
	    printf "%s\n" "${json_digest}" |\
            curl -s -X PUT -d @- http://${HSPROV}/private/${private_id}
	)
	#echo "put_sta=$put_sta"
	if [ ! -z "$put_sta" ]; then
	    printf "Error: couldn't create private user '${rprivate_id}'!\n"
	    exit 1
	fi

	if [ $accession -ne 0 ]; then
	    #
	    # Create the accession ID
	    #
	    new_digest=$(
		printf "${raccession_id}:${DOMAIN}:${PASSWORD}"|md5sum|awk '{print $1}'
	    )
	    json_digest="{\"digest_ha1\": \"${new_digest}\", \"realm\": \"${DOMAIN}\"}"
	    #echo "json_digest=${json_digest}"
	    put_sta=$(
		printf "%s\n" "${json_digest}" |\
                curl -s -X PUT -d @- http://${HSPROV}/private/${accession_id}
	    )
	    if [ ! -z "$put_sta" ]; then
		printf "Error: couldn't create private user '${raccession_id}'!\n"
		exit 1
	    fi
	fi

	#
	# Create IRS
	#
	irs_uuid=$(
	    curl -s -D - -X POST http://${HSPROV}/irs|\
            grep "Location:"|awk '{print $2}'|\
            sed -e 's#[[:space:]]##g'|\
            sed -e 's#/irs/##'
	)
	#echo "irs_uuid=$irs_uuid"

	#
	# Associate the private ID with the new IRS
	#
	#echo curl -d "" -s -X PUT http://${HSPROV}/private/${private_id}/associated_implicit_registration_sets/${irs_uuid}
	rsp=$(
	    curl -d "" -s -X PUT http://${HSPROV}/private/${private_id}/associated_implicit_registration_sets/${irs_uuid}
	)
	#echo "rsp=$rsp"
	if [ ! -z "$rsp" ]; then
	    printf "Error: couldn't associate '${rprivate_id}' with IRS '${irs_uuid}!\n"
	    ${mydir}/delete_user -fq ${rUSER} ${DOMAIN}
	    exit 1
	fi

	if [ $accession -ne 0 ]; then
	    #
	    # Associate the accession ID with the new IRS
	    #
	    #echo curl -s -X PUT http://${HSPROV}/private/${accession_id}/associated_implicit_registration_sets/${irs_uuid}
	    rsp=$(
		curl -s -X PUT http://${HSPROV}/private/${accession_id}/associated_implicit_registration_sets/${irs_uuid}
	    )
	    if [ ! -z "$rsp" ]; then
		printf "Error: couldn't associate '${raccession_id}' with IRS '${irs_uuid}!\n"
		${mydir}/delete_user -fq ${rUSER} ${DOMAIN}
		exit 1
	    fi
	fi

	#
	# Create the service profile
	#
	#echo curl -s -X POST http://${HSPROV}/irs/${irs_uuid}/service_profiles
	sp_uuid=$(
	    curl -s -D - -X POST http://${HSPROV}/irs/${irs_uuid}/service_profiles|\
        grep "Location:"|\
        awk '{print $2}'|\
        sed -e 's#[[:space:]]##g'|\
        sed -e 's#/irs/.*/service_profiles/##'
	)
	#echo "sp_uuid=$sp_uuid"

	#
	# Create public ID
	#
	#printf "<PublicIdentity><Identity>%s</Identity></PublicIdentity>\n" "${rpublic_id}"
	pubid_sta=$(
	    printf "<PublicIdentity><Identity>%s</Identity></PublicIdentity>\n" "${rpublic_id}"|\
            curl -s -X PUT -d @- http://${HSPROV}/irs/${irs_uuid}/service_profiles/${sp_uuid}/public_ids/${public_id}
	)
	#echo "pubid_sta=$pubid_sta"
	if [ ! -z "$pubid_sta" ]; then
	    printf "Error: couldn't create public ID '%s'!\n" "${rpublic_id}"
	    ${mydir}/delete_user -fq ${rUSER} ${DOMAIN}
	    exit 1
	fi

	#
	# Set iFC
	#
	service_profile=$(
	    curl -s -D - http://${HSPROV}/public/${public_id}/service_profile|\
    grep "Location:"|\
    awk '{print $2}'|\
    tr '[[:space:]]' ' '|sed -e 's#[[:space:]]##g'
	)
	if [ -z $IFC ]; then
		cat > /tmp/$$.iFC <<'EOF'
<?xml version="1.0" ?>
<ServiceProfile>
</ServiceProfile>
EOF
	else
	    cat $IFC > /tmp/$$.iFC
	fi

	sed -ie "s#\${DOMAIN}#${DOMAIN}#g" /tmp/$$.iFC
	sed -ie "s#\${PREFIX}#${PREFIX}#g" /tmp/$$.iFC
	
	ifc_sta=$(
	    cat /tmp/$$.iFC|\
        curl -s -X PUT -d @- http://${HSPROV}${service_profile}/filter_criteria
	)
	if [ ! -z $ifc_sta ]; then
	    printf "Error: couldn't update iFC!\n"
	    ${mydir}/delete_user -fq ${rUSER} ${DOMAIN}
	    exit 1
	fi

	rm -f /tmp/$$.iFC*

	if [ $quiet -eq 0 ];then
	    ${mydir}/display_user ${rUSER} ${DOMAIN}
	fi    
    done
    let "i=$i + 1"
done
