#!/bin/bash

mydir=$(cd `dirname $0`;pwd)
cwd=$(pwd)
quiet=0

cmdname=$0

usage()
{
    printf "\
Usage: $cmdname [OPTION...] <directory-number>[...<directory-number>] <domain> <password>\n\
\n\
Options:\n\
  -q, --quiet       don't display the user\n\
  -h, --help        display this usage\n"

    printf "\n"

    exit 0
}

error()
{
    printf "$@"
    printf "\n\n"

    usage
}

params="$(getopt -o hq -l help,quiet --name $cmdname -- "$@")"

if [ $? -ne 0 ]
then
    usage
fi

eval set -- "$params"
unset params

while true
do
    case $1 in
	--)
	shift
	break
	;;
        -q|--quiet)
        let "quiet=1"
	shift
        ;;
        -h|--help)
        usage
        ;;
        *)
        usage
        ;;
    esac
done

local_settings=$(
    find /usr/share/clearwater/homestead/env -name local_settings.py
)
if [ -z "$local_settings" ]; then
    printf "Error: can't find local_settings.py!\n"
    exit 1
fi
    
eval $(
    python -c "execfile(\"$local_settings\"); print \"\
LOCAL_IP=%s\n\
HTTP_PORT=%s\n\
LOCAL_PROVISIONING_ENABLED=%s\n\
HSS_ENABLED=%s\n\" % \
(LOCAL_IP, HTTP_PORT, LOCAL_PROVISIONING_ENABLED, HSS_ENABLED)"
)

if [ -z $LOCAL_IP ]; then
    printf "Error: no LOCAL_IP in local_settings!\n"
    exit 1
fi

if [ -z $HTTP_PORT ]; then
    printf "Error: no HTTP_PORT in local_settings!\n"
    exit 1
fi

if [ "$LOCAL_PROVISIONING_ENABLED" != "True" ]; then
    printf "Error: local provisioning is not enabled!\n"
    exit 1
fi

if [ "$HSS_ENABLED" != "False" ]; then
    printf "Error: HSS is not disabled!\n"
    exit 1
fi

USER=$1
if [ -z $USER ]; then
    error "Error: a user (directory number) must be specified!"
fi
shift
DOMAIN=$1
if [ -z $DOMAIN ]; then
    error "Error: a domain must be specified!"
fi
shift
PASSWORD=$1
if [ -z $PASSWORD ]; then
    error "Error: a password must be specified!"
fi
shift

HSPROV=${LOCAL_IP}:${HTTP_PORT}
_USERS=(${USER//,/ })
USERS=()
for _USER in ${_USERS[@]}; do
    seq_USERS=(${_USER//./ })
    if [ ${#seq_USERS[@]} -eq 1 ]; then
        seq_USERS[1]=${seq_USERS[0]}
    fi
    if [[ "${seq_USERS[0]}" =~ [^0-9] ]]; then
	printf "Error: invalid user range - ${seq_USERS[0]}..${seq_USERS[1]}!\n"
	exit 1
    fi
    if [[ "${seq_USERS[1]}" =~ [^0-9] ]]; then
	printf "Error: invalid user range - ${seq_USERS[0]}..${seq_USERS[1]}!\n"
	exit 1
    fi
    if [ ${seq_USERS[0]} -gt ${seq_USERS[1]} ]; then
	printf "Error: invalid user range - ${seq_USERS[0]}..${seq_USERS[1]}!\n"
	exit 1
    fi
    USERS[${#USERS[@]}]="{${seq_USERS[0]}..${seq_USERS[1]}}"
done

for USER in $(eval echo ${USERS[@]}); do
    public_id=sip:${USER}@${DOMAIN}
    private_id=${USER}@${DOMAIN}

    if [ "$(curl -s http://${HSPROV}/ping 2>&1)" != "OK" ]; then
	printf "Error: can't contact homestead-prov @ http://${HSPROV}!\n"
	exit 1
    fi

    impu=$(curl -s http://${HSPROV}/impu/${public_id} 2>&1)
    if [[ ${impu:0:1} == "<" ]]; then
	if [[ "$(curl -s http://${HSPROV}/impi/${private_id}/digest)" =~ digest_ha1 ]]; then
	    public_id=${public_id}

	    service_profile=$(
		curl -s -D - http://${HSPROV}/public/${public_id}/service_profile|\
                grep "Location:"|\
                awk '{print $2}'|\
                tr '[[:space:]]' ' '|\
                sed -e 's#[[:space:]]##g'
            )

	    new_digest=$(
		printf "${private_id}:${DOMAIN}:${PASSWORD}"|md5sum|awk '{print $1}'
	    )
	    json_digest="{\"digest_ha1\": \"${new_digest}\", \"realm\": \"${DOMAIN}\"}"
	    put_sta=$(
		printf "%s\n" "${json_digest}"|\
                curl -s curl -X PUT -d @- http://${HSPROV}/private/${private_id}
	    )
	    if [ ! -z $put_sta ]; then
		printf "Error: couldn't update password!\n"
		exit 1
	    fi

	    if [ $quiet -eq 0 ];then
		${mydir}/display_user ${USER} ${DOMAIN}
	    fi
        else
	    printf "Error: no IMPI user ${private_id}\n"
	    exit 1
	fi
    else
        printf "Error: no IMPU user '${public_id}'\n"
	exit 1
    fi
done
