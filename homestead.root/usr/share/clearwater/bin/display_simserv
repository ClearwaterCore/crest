#!/bin/bash

# @file displaysimserv
#
# Project Clearwater - IMS in the Cloud
# Copyright (C) 2013  Metaswitch Networks Ltd
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version, along with the "Special Exception" for use of
# the program along with SSL, set forth below. This program is distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details. You should have received a copy of the GNU General Public
# License along with this program.  If not, see
# <http://www.gnu.org/licenses/>.
#
# The author can be reached by email at clearwater@metaswitch.com or by
# post at Metaswitch Networks Ltd, 100 Church St, Enfield EN2 6BQ, UK
#
# Special Exception
# Metaswitch Networks Ltd  grants you permission to copy, modify,
# propagate, and distribute a work formed by combining OpenSSL with The
# Software, or a work derivative of such a combination, even if such
# copying, modification, propagation, or distribution would otherwise
# violate the terms of the GPL. You must comply with the GPL in all
# respects for all of the code used other than OpenSSL.
# "OpenSSL" means OpenSSL toolkit software distributed by the OpenSSL
# Project and licensed under the OpenSSL Licenses, or a work based on such
# software and licensed under the OpenSSL Licenses.
# "OpenSSL Licenses" means the OpenSSL License and Original SSLeay License
# under which the OpenSSL Project distributes the OpenSSL toolkit software,
# as those licenses appear in the file LICENSE-OPENSSL.

mydir=$(cd `dirname $0`;pwd)
cwd=$(pwd)
quiet=0
keep_going=0

cmdname=$0

usage()
{
    printf "\
Usage: $cmdname [OPTION...] <directory-number>[...<directory-number>] <domain>\n\
\n\
Options:\n\
  -k, --keep-going          keep going on errors\n\
  -q, --quiet               don't display the simserv\n\
  -h, --help                display this usage\n"

    printf "\n"

    exit 0
}

error()
{
    printf "$@"
    printf "\n\n"

    usage
}

params="$(getopt -o hqk -l help,keep-going --name $cmdname -- "$@")"

if [ $? -ne 0 ]
then
    usage
fi

eval set -- "$params"
unset params

while true
do
    case $1 in
	--)
	shift
	break
	;;
        -q|--quiet)
        let "quiet=1"
	shift
        ;;
	-k|--keep-going)
	let "keep_going=1"
	shift
	;;
        -h|--help)
        usage
        ;;
        *)
        usage
        ;;
    esac
done

local_settings=$(
    find /usr/share/clearwater/homer/env -name local_settings.py
)
if [ -z "$local_settings" ]; then
    printf "Error: can't find local_settings.py!\n"
    exit 1
fi
    
USER=$1
if [ -z $USER ]; then
    error "Error: a user (directory number) must be specified!"
fi
shift
DOMAIN=$1
if [ -z $DOMAIN ]; then
    error "Error: a domain must be specified!"
fi
shift

_USERS=(${USER//,/ })
USERS=()
for _USER in ${_USERS[@]}; do
    seq_USERS=(${_USER//./ })
    if [ ${#seq_USERS[@]} -eq 1 ]; then
        seq_USERS[1]=${seq_USERS[0]}
    fi
    if [[ "${seq_USERS[0]}" =~ [^0-9] ]]; then
	printf "Error: invalid user range - ${seq_USERS[0]}..${seq_USERS[1]}!\n"
	exit 1
    fi
    if [[ "${seq_USERS[1]}" =~ [^0-9] ]]; then
	printf "Error: invalid user range - ${seq_USERS[0]}..${seq_USERS[1]}!\n"
	exit 1
    fi
    if [ ${seq_USERS[0]} -gt ${seq_USERS[1]} ]; then
	printf "Error: invalid user range - ${seq_USERS[0]}..${seq_USERS[1]}!\n"
	exit 1
    fi
    USERS[${#USERS[@]}]="{${seq_USERS[0]}..${seq_USERS[1]}}"
done

for USER in $(eval echo ${USERS[@]}); do
    public_id=sip:${USER}@${DOMAIN}
    private_id=${USER}@${DOMAIN}

    line=$(printf "\
use homer;\n\
SELECT * FROM simservs WHERE user = '%s';\n\
quit\n" "${public_id}" | cqlsh -3 | grep "^[[:space:]]*${public_id}")

    SIMSERV=$(printf "%s" "${line}"|sed -e "s#.*${public_id} [^ ] \(.*\)\$#\\1#")

    if [ -z "$SIMSERV" ]; then
	if [[ $keep_going == 0 || ( $keep_going != 0 && $quiet == 0 ) ]]; then
	    printf "Error: no user '${public_id}'\n"
	fi
	if [ $keep_going -eq 0 ]; then
	    exit 1
	else
	    continue
	fi
    fi

    echo ${public_id}:
    echo "  simserv:"
    (
	printf "%s" "$SIMSERV"|python -c 'import xml.dom.minidom, sys; print xml.dom.minidom.parse(sys.stdin).toprettyxml()'|sed -e '/^[[:space:]]*$/d'
    ) 2>&1 | while IFS='' read -r line; do
	printf "     %s\n" "$line"
    done

done
